// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name LiveBroadcastSDK
import AWSCore
import AWSIoT
import AWSMobileClient
import AgoraRtcKit
import Foundation
@_exported import LiveBroadcastSDK
import Swift
import UIKit
public enum LBProductsFeaturedUpdateType : Swift.String, Swift.Codable {
  case featured
  case unFeatured
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LBProductsFeaturedUnfeaturedData : Swift.Codable {
  public var eventType: Swift.String?
  public var broadcastId: Swift.String?
  public var broadcastTitle: Swift.String?
  public var timeStamp: Foundation.Date?
  public var updatingUserId: Swift.String?
  public var updatingUserDisplayName: Swift.String?
  public var updateType: LiveBroadcastSDK.LBProductsFeaturedUpdateType?
  public var productIds: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class LBMentionedUser : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.String?
  public var userId: Swift.String?
  public var order: Swift.Int?
  public var wordCount: Swift.Int?
  public var user: LiveBroadcastSDK.LBUser?
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class LBMessageAttachment : ObjectiveC.NSObject, Swift.Codable {
  public var type: LiveBroadcastSDK.LBAttachmentType?
  public var adminMessageType: LiveBroadcastSDK.LBAdminMessageType?
  public var name: Swift.String?
  public var mimeType: Swift.String?
  public var attachmentExtension: Swift.String?
  public var attachMentSize: Swift.Int?
  public var locationLatitude: Swift.Double?
  public var locationLongitude: Swift.Double?
  public var locationAddress: Swift.String?
  public var locationTitle: Swift.String?
  public var audioDuration: Swift.Double?
  public var metaData: LiveBroadcastSDK.LBAttachmentMetaData?
  public var fileUrl: Foundation.URL? {
    get
    set(newValue)
  }
  public var thumbnailUrl: Foundation.URL? {
    get
    set(newValue)
  }
  public var gifStickerDownloadUrl: Foundation.URL? {
    get
    set(newValue)
  }
  public var gifStickerStillUrl: Foundation.URL? {
    get
    set(newValue)
  }
  public var gifStickerOriginalUrl: Foundation.URL? {
    get
    set(newValue)
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class LBMessage : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.String?
  public var conversationId: Swift.String?
  public var messageType: LiveBroadcastSDK.LBMessageType?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var body: Swift.String?
  public var ownerId: Swift.String?
  public var owner: LiveBroadcastSDK.LBUser?
  public var attachments: [LiveBroadcastSDK.LBMessageAttachment]?
  public var mentionedUsers: [LiveBroadcastSDK.LBMentionedUser]?
  public var isDeleted: Swift.Bool?
  public var parentMessage: LiveBroadcastSDK.LBMessage?
  public var reactionsCount: [Swift.String : Swift.Int]?
  public var reactions: [Swift.String : [Swift.String]]?
  public var isEncrypted: Swift.Bool?
  public var myReactions: [Swift.String]?
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension Encodable {
  public var dictionary: [Swift.String : Any]? {
    get
  }
}
public struct LBReactionData : Swift.Codable {
  public var eventType: Swift.String?
  public var timeStamp: Foundation.Date?
  public var broadcastId: Swift.String?
  public var broadcastTitle: Swift.String?
  public var newReactionsCountInfo: [Swift.String : Swift.Int]?
  public var reactionTime: Foundation.Date?
  public var reactionId: Swift.String?
  public var reactionType: Swift.String?
  public var userId: Swift.String?
  public var userDisplayName: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum LBAdminMessageType : Swift.String, Swift.Codable {
  case groupCreate
  case addMembers
  case groupLeave
  case removeMember
  case makeGroupAdmin
  case changeGroupTitle
  case changeGroupPhoto
  case missedVideoCall
  case missedVoiceCall
  case callCompleted
  case callDeclined
  case callNotAnswered
  case callMissed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SFProductVariant : Swift.Codable {
  public var id: Swift.String?
  public var productId: Swift.String?
  public var price: Swift.String?
  public var presentmentPrices: [LiveBroadcastSDK.SFProductPresentmentPrice]?
  public var title: Swift.String?
  public var option1: Swift.String?
  public var option2: Swift.String?
  public var option3: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class LBBroadcast : Swift.Codable {
  public var id: Swift.String?
  public var title: Swift.String?
  public var description: Swift.String?
  public var conversationId: Swift.String?
  public var ownerId: Swift.String?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var startTime: Foundation.Date?
  public var endTime: Foundation.Date?
  public var actualStartTime: Foundation.Date?
  public var actualEndTime: Foundation.Date?
  public var maxWatchersTime: Foundation.Date?
  public var statusFlag: Swift.Int?
  public var duration: Swift.Int?
  public var watchersCount: Swift.Int?
  public var maxWatchersCount: Swift.Int?
  public var viewersCount: Swift.Int?
  public var isPublished: Swift.Bool?
  public var isRecordingAllowed: Swift.Bool?
  public var status: LiveBroadcastSDK.LBBroadcastStatus?
  public var hosts: [LiveBroadcastSDK.LBHost]?
  public var products: [LiveBroadcastSDK.LBProduct]?
  public var bannerImageUrl: Foundation.URL?
  public var bannerVideoUrl: Foundation.URL?
  public var recordingUrl: Foundation.URL?
  public var metaData: [Swift.String : LiveBroadcastSDK.AnyCodable]?
  public var reactionsCountInfo: [Swift.String : Swift.Int]?
  public var configurations: [Swift.String : LiveBroadcastSDK.AnyCodable]?
  public var isAnonymousAllowedToWatch: Swift.Bool
  public var isGuestUserAllowedToChat: Swift.Bool
  public init()
  required public init(from decoder: Swift.Decoder) throws
  public var differenceIdentifier: Swift.String {
    get
  }
  public func isContentEqual(to source: LiveBroadcastSDK.LBBroadcast) -> Swift.Bool
  public func addReaction(reaction type: Swift.String, completion: @escaping (Swift.Bool, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public func startWatchingBroadcastConversation(completion: @escaping (Swift.Bool, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public func stopWatchingBroadcastConversation(completion: @escaping (Swift.Bool, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public func sendMessage(message: Swift.String, completion: @escaping (LiveBroadcastSDK.LBMessage?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public func startWatching(completion: @escaping (Swift.Bool, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public func stopWatching(completion: @escaping (Swift.Bool, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public func loadChatMessages(queryBuilder: LiveBroadcastSDK.LBGetMessagesQueryBuilder, completion: @escaping ([LiveBroadcastSDK.LBMessage]?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public func subscribeEvents()
  public func unSubscribeEvents()
  public func playVideoStream(streamConfig: LiveBroadcastSDK.LBVideoStreamConfig)
  public func stopVideoStream()
  public func getFeaturedProductIds() -> [Swift.String]
  public func getProducts() -> [LiveBroadcastSDK.LBProduct]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public class LBProduct : Swift.Codable {
  public var id: Swift.String?
  public var isFeatured: Swift.Bool?
  public var title: Swift.String?
  public var thumbnailUrl: Foundation.URL? {
    get
  }
  public var productUrl: Foundation.URL? {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SFProduct : Swift.Codable {
  public var id: Swift.String?
  public var title: Swift.String?
  public var body_html: Swift.String?
  public var vendor: Swift.String?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var publishedAt: Foundation.Date?
  public var image: LiveBroadcastSDK.SFProductImage?
  public var variants: [LiveBroadcastSDK.SFProductVariant]?
  public var options: [LiveBroadcastSDK.SFProductOptions]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct LBReaction : Swift.Codable {
  public var id: Swift.String?
  public var type: Swift.String?
  public var userId: Swift.String?
  public var user: LiveBroadcastSDK.LBUser?
  public var createdAt: Foundation.Date?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum LBMessageType : Swift.String, Swift.Codable {
  case normal
  case admin
  case quotedMessage
  case forward
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LBBroadcastStatusUpdateData : Swift.Codable {
  public var eventType: Swift.String?
  public var broadcastId: Swift.String?
  public var broadcastTitle: Swift.String?
  public var newStatus: LiveBroadcastSDK.LBBroadcastStatus?
  public var broadcastLastUpdatedAt: Foundation.Date?
  public var broadcastActualStartTime: Foundation.Date?
  public var broadcastActualEndTime: Foundation.Date?
  public var totalDuration: Swift.Int?
  public var eventTimeStamp: Foundation.Date?
  public var liveUserId: Swift.String?
  public var liveUserDisplayName: Swift.String?
  public var liveUserWebRtcId: Swift.UInt?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct LBUser : Swift.Codable {
  public var id: Swift.String?
  public var displayName: Swift.String?
  public var languageCode: Swift.String?
  public var profileImageUrl: Foundation.URL?
  public var profileUrl: Foundation.URL?
  public var isOnline: Swift.Bool?
  public var isVisible: Swift.Bool?
  public var isNotificationOn: Swift.Bool?
  public var lastSeen: Foundation.Date?
  public var lastLogin: Foundation.Date?
  public var lastActivity: Foundation.Date?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var email: Swift.String?
  public var isBlocked: Swift.Bool?
  public var hasBlocked: Swift.Bool?
  public var isDeleted: Swift.Bool?
  public var isActive: Swift.Bool?
  public var isAdmin: Swift.Bool?
  public var accessToken: Swift.String?
  public var userRole: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SFProductOptions : Swift.Codable {
  public var productId: Swift.String?
  public var id: Swift.String?
  public var name: Swift.String?
  public var position: Swift.Int?
  public var values: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum LBBroadCastListSortOrder : Swift.String {
  case DESC
  case ASC
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LBBroadCastsListQueryBuilder {
  public var ids: [Swift.String]?
  public var ownerIds: [Swift.String]?
  public var searchQuery: Swift.String?
  public var status: LiveBroadcastSDK.LBBroadcastStatus?
  public var includeUnpublished: Swift.Bool?
  public var recording: Swift.Bool?
  public var hosts: [Swift.String]?
  public var limit: Swift.Int
  public var skip: Swift.Int
  public var sort: LiveBroadcastSDK.LBBroadCastListSortOrder?
  public init()
}
public struct LBError {
  public let errorCode: LiveBroadcastSDK.LBErrorCode
  public let errorMessage: Swift.String
  public var extraInfo: [Swift.String : Any]?
}
public enum LBConnectionStatus : Swift.String {
  case connecting
  case connected
  case disconnected
  case connectionRefused
  case error
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LBBroadcastStatus : Swift.String, Swift.Codable {
  case upcoming
  case live
  case completed
  case cancelled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LBMessageSorting : Swift.String {
  case ASC
  case DESC
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LBGetMessagesQueryBuilder {
  public var ids: [Swift.String]?
  public var types: [LiveBroadcastSDK.LBMessageType]?
  public var customTypes: [Swift.String]?
  public var attachmentTypes: [LiveBroadcastSDK.LBAttachmentType]?
  public var ownerIds: [Swift.String]?
  public var parentId: Swift.String?
  public var sort: LiveBroadcastSDK.LBMessageSorting?
  public var limit: Swift.Int?
  public var skip: Swift.Int?
  public init()
}
public protocol LiveBroadcastDelegate {
  func didLBErrorOccured(error: LiveBroadcastSDK.LBError)
  func didConnectionStatusUpdate(newStatus: LiveBroadcastSDK.LBConnectionStatus)
  func didBroadcastStarted(update: LiveBroadcastSDK.LBBroadcastLiveUpdate)
  func didBroadcastCompleted(update: LiveBroadcastSDK.LBBroadcastCompletedUpdate)
  func didWatchersCountUpdated(update: LiveBroadcastSDK.LBWatchersUpdateData)
  func didNewReactionAddedToBroadcast(update: LiveBroadcastSDK.LBReactionData)
  func didRecievedNewMessageInBroadcast(update: LiveBroadcastSDK.LBBroadcastNewMessageData)
  func didMessageDeletedFromBroadcast(update: LiveBroadcastSDK.LBBroadcastMessagesDeletedData)
  func didBroadcastProductFeaturedUnfeatured(update: LiveBroadcastSDK.LBProductsFeaturedUnfeaturedData)
}
extension LiveBroadcastDelegate {
  public func didLBErrorOccured(error: LiveBroadcastSDK.LBError)
  public func didConnectionStatusUpdate(newStatus: LiveBroadcastSDK.LBConnectionStatus)
  public func didBroadcastStarted(update: LiveBroadcastSDK.LBBroadcastLiveUpdate)
  public func didBroadcastCompleted(update: LiveBroadcastSDK.LBBroadcastCompletedUpdate)
  public func didWatchersCountUpdated(update: LiveBroadcastSDK.LBWatchersUpdateData)
  public func didNewReactionAddedToBroadcast(update: LiveBroadcastSDK.LBReactionData)
  public func didRecievedNewMessageInBroadcast(update: LiveBroadcastSDK.LBBroadcastNewMessageData)
  public func didMessageDeletedFromBroadcast(update: LiveBroadcastSDK.LBBroadcastMessagesDeletedData)
  public func didBroadcastProductFeaturedUnfeatured(update: LiveBroadcastSDK.LBProductsFeaturedUnfeaturedData)
}
@objc public class LBAttachmentMetaData : ObjectiveC.NSObject, Swift.Codable {
  public var subjectId: Swift.String?
  public var subjectType: Swift.String?
  public var objectType: Swift.String?
  public var objectValues: LiveBroadcastSDK.AnyCodable?
  public var subjectUser: LiveBroadcastSDK.LBUser?
  public var objectUsers: [LiveBroadcastSDK.LBUser]?
  public var objectUser: LiveBroadcastSDK.LBUser?
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AnyEncodable : LiveBroadcastSDK._AnyEncodable {
}
extension _AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnyEncodable : Swift.Equatable {
  public static func == (lhs: LiveBroadcastSDK.AnyEncodable, rhs: LiveBroadcastSDK.AnyEncodable) -> Swift.Bool
}
extension AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension _AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
public struct LBBroadcastLiveUpdate {
  public var broadcastId: Swift.String?
  public var broadcastTitle: Swift.String?
  public var newStatus: LiveBroadcastSDK.LBBroadcastStatus?
  public var broadcastActualStartTime: Foundation.Date?
  public var liveUserId: Swift.String?
  public var liveUserDisplayName: Swift.String?
  public var liveUserWebRtcId: Swift.UInt?
}
public enum LBAttachmentType : Swift.String, Swift.Codable {
  case image
  case metaMessage
  case audio
  case location
  case sticker
  case gif
  case video
  case doc
  case text
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LBVideoStreamServiceDelegate {
  func didErrorOccuredInVideoService(error: LiveBroadcastSDK.LBError)
  func didVideoChannelJoinedSuccessfully(channelName: Swift.String)
  func didVideoChannelLeftSuccessfully(channelName: Swift.String)
  func didHostStreamGotOffline(channelName: Swift.String, uid: Swift.UInt)
  func didRecieveHostVideoStream(channelName: Swift.String, uid: Swift.UInt)
}
extension LBVideoStreamServiceDelegate {
  public func didErrorOccuredInVideoService(error: LiveBroadcastSDK.LBError)
  public func didHostStreamGotOffline(channelName: Swift.String, uid: Swift.UInt)
  public func didVideoChannelJoinedSuccessfully(channelName: Swift.String)
  public func didVideoChannelLeftSuccessfully(channelName: Swift.String)
  public func didRecieveHostVideoStream(channelName: Swift.String, uid: Swift.UInt)
}
@objc @_inheritsConvenienceInitializers public class LBVideoStreamService : ObjectiveC.NSObject {
  public static var instance: LiveBroadcastSDK.LBVideoStreamService
  public func addDelegates(delegate: LiveBroadcastSDK.LBVideoStreamServiceDelegate, identifier: Foundation.UUID)
  public func removeDelegate(identifier: Foundation.UUID)
  public func joinVideoChannel(channelName: Swift.String, streamConfig: LiveBroadcastSDK.LBVideoStreamConfig)
  public func leaveVideoChannel(channelName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension LBVideoStreamService : AgoraRtcKit.AgoraRtcEngineDelegate, AgoraRtcKit.AgoraRtcChannelDelegate {
  @objc dynamic public func rtcChannelDidJoin(_ rtcChannel: AgoraRtcKit.AgoraRtcChannel, withUid uid: Swift.UInt, elapsed: Swift.Int)
  @objc dynamic public func rtcChannelDidLeave(_ rtcChannel: AgoraRtcKit.AgoraRtcChannel, with stats: AgoraRtcKit.AgoraChannelStats)
  @objc dynamic public func rtcChannel(_ rtcChannel: AgoraRtcKit.AgoraRtcChannel, didJoinedOfUid uid: Swift.UInt, elapsed: Swift.Int)
  @objc dynamic public func rtcChannel(_ rtcChannel: AgoraRtcKit.AgoraRtcChannel, didOfflineOfUid uid: Swift.UInt, reason: AgoraRtcKit.AgoraUserOfflineReason)
}
public struct LBBroadcastCompletedUpdate {
  public var broadcastId: Swift.String?
  public var broadcastTitle: Swift.String?
  public var newStatus: LiveBroadcastSDK.LBBroadcastStatus?
  public var broadcastActualEndTime: Foundation.Date?
  public var totalDuration: Swift.Int?
}
public struct SFProductPresentmentPrice : Swift.Codable {
  public var price: LiveBroadcastSDK.SFProductPresentmentPriceInfo?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum LBServerEnvironment {
  case dev
  case production
  public static func == (a: LiveBroadcastSDK.LBServerEnvironment, b: LiveBroadcastSDK.LBServerEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LBWatchersUpdateType : Swift.String, Swift.Codable {
  case stopWatching
  case startWatching
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LBWatchersUpdateData : Swift.Codable {
  public var eventType: Swift.String?
  public var timeStamp: Foundation.Date?
  public var broadcastId: Swift.String?
  public var broadcastTitle: Swift.String?
  public var newWatchersCount: Swift.Int?
  public var userId: Swift.String?
  public var userDisplayName: Swift.String?
  public var updateType: LiveBroadcastSDK.LBWatchersUpdateType?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension CharacterSet {
  public static var afURLQueryAllowed: Foundation.CharacterSet
}
public enum LBErrorCode : Swift.String {
  case LB_NOT_CONFIGURED
  case LB_EVENT_MANAGER_NOT_FOUND
  case LB_VIDEO_SERVICE_FAILED_TO_INITIALIZE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SFProductPresentmentPriceInfo : Swift.Codable {
  public var currencyCode: Swift.String?
  public var amount: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum LBCurrentUserPropertiesKey : Swift.String {
  case userId
  case accessToken
  case displayName
  case profileImageUrl
  case currentUser
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LBCurrentUserType : Swift.String {
  case anonymous
  case guest
  case user
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AnyCodable : LiveBroadcastSDK._AnyEncodable, LiveBroadcastSDK._AnyDecodable {
}
extension AnyCodable : Swift.Equatable {
  public static func == (lhs: LiveBroadcastSDK.AnyCodable, rhs: LiveBroadcastSDK.AnyCodable) -> Swift.Bool
}
extension AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
public struct LBBroadcastMessagesDeletedData : Swift.Codable {
  public var deletedMessages: [LiveBroadcastSDK.LBMessage]?
  public var timeStamp: Foundation.Date?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AnyDecodable : LiveBroadcastSDK._AnyDecodable {
}
extension _AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
extension AnyDecodable : Swift.Equatable {
  public static func == (lhs: LiveBroadcastSDK.AnyDecodable, rhs: LiveBroadcastSDK.AnyDecodable) -> Swift.Bool
}
extension AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct Throwable<T> : Swift.Decodable where T : Swift.Decodable {
  public let result: Swift.Result<T, Swift.Error>
  public init(from decoder: Swift.Decoder) throws
}
public struct LBConfig {
  public var apiPublicKey: Swift.String
  @available(*, deprecated, message: "Reserved for Future Use")
  public var storeUrl: Swift.String
  public init()
}
@objc @_inheritsConvenienceInitializers public class LiveBroadcast : ObjectiveC.NSObject {
  public var serverEnvironment: LiveBroadcastSDK.LBServerEnvironment
  public static var instance: LiveBroadcastSDK.LiveBroadcast
  public static func configure(with configuration: LiveBroadcastSDK.LBConfig)
  public func getStoreUrl() -> Swift.String
  public func getAnonymousUserId() -> Swift.String
  public func getCurrentUserId() -> Swift.String?
  public func getCurrentUserRole() -> LiveBroadcastSDK.LBCurrentUserType
  public func getAppId() -> Swift.String
  public static func setUserInfo(userId: Swift.String, accessToken: Swift.String)
  public static func logout(completion: (() -> ())? = nil)
  public func addDelegate(delegate: LiveBroadcastSDK.LiveBroadcastDelegate, identifier: Foundation.UUID)
  public func removeDelegate(identifier: Foundation.UUID)
  public func enableApiLogs()
  @objc override dynamic public init()
  @objc deinit
}
extension LiveBroadcast {
  public static func login(userId: Swift.String, accessToken: Swift.String, completion: @escaping (LiveBroadcastSDK.LBUser?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public static func login(email: Swift.String, password: Swift.String, completion: @escaping (LiveBroadcastSDK.LBUser?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public static func login(userId: Swift.String, pmClientServerToken: Swift.String, comletion: @escaping (LiveBroadcastSDK.LBUser?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public static func logout(comletion: (() -> ())? = nil)
  public static func getBroadcasts(queryBuilder: LiveBroadcastSDK.LBBroadCastsListQueryBuilder, completion: @escaping ([LiveBroadcastSDK.LBBroadcast]?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public static func getBroadcast(with id: Swift.String, completion: @escaping (LiveBroadcastSDK.LBBroadcast?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public static func createGuestUser(displayName: Swift.String, completion: @escaping (LiveBroadcastSDK.LBUser?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public static func getUserInfo(userId: Swift.String, completion: @escaping (LiveBroadcastSDK.LBUser?, LiveBroadcastSDK.LBApiError?) -> Swift.Void)
  public static func isLogoutUser() -> Swift.Bool
  public static func getCurrentUserRole() -> LiveBroadcastSDK.LBCurrentUserType
}
public struct LBSendMessageBuilder {
  public var id: Swift.String?
  public var conversationId: Swift.String?
  public var userId: Swift.String?
  public var messageType: LiveBroadcastSDK.LBMessageType?
  public var customType: Swift.String?
  public var body: Swift.String?
  public var createdAt: Foundation.Date?
  public var ownerId: Swift.String?
  public var parentId: Swift.String?
  public var recipients: [Swift.String]?
  public var isGroupConversation: Swift.Bool?
  public init()
}
public class LBHost : Swift.Codable {
  public var id: Swift.String?
  public var userId: Swift.String?
  public var rtcUserId: Swift.UInt?
  public var user: LiveBroadcastSDK.LBUser?
  public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SFProductImage : Swift.Codable {
  public var id: Swift.String?
  public var productId: Swift.String?
  public var postition: Swift.Int?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var imageSrcUrl: Foundation.URL?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct LBApiError {
  public var errorMessage: Swift.String?
  public var statusCode: Swift.Int?
  public var errorCode: Swift.String?
}
public enum LBVideoStreamRenderMode {
  case scaleAspectFill
  case scaleAspectFit
  case scaleToFill
  public static func == (a: LiveBroadcastSDK.LBVideoStreamRenderMode, b: LiveBroadcastSDK.LBVideoStreamRenderMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class LBVideoStreamConfig : ObjectiveC.NSObject {
  public var streamContainerView: UIKit.UIView?
  public var streamRenderMode: LiveBroadcastSDK.LBVideoStreamRenderMode
  public init(streamView: UIKit.UIView? = nil, renderMode: LiveBroadcastSDK.LBVideoStreamRenderMode = .scaleAspectFill)
  @objc override dynamic public init()
  @objc deinit
}
public struct LBBroadcastNewMessageData : Swift.Codable {
  public var message: LiveBroadcastSDK.LBMessage?
  public var timeStamp: Foundation.Date?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
